graph_neighbours = {}

def generate_graph():
    add_neighbours(0, [8, 1])
    add_neighbours(1, [0, 9, 2])
    add_neighbours(2, [10, 1])
    add_neighbours(3, [4])
    add_neighbours(4, [3, 12, 5])
    add_neighbours(5, [4, 13])
    add_neighbours(6, [7])
    add_neighbours(7, [15])
    add_neighbours(8, [0, 16])
    add_neighbours(9, [1, 17])
    add_neighbours(10, [2, 11])
    add_neighbours(11, [10, 19])
    add_neighbours(12, [4, 20])
    add_neighbours(13, [5, 14])

    add_neighbours(14, [13, 22])
    add_neighbours(15, [7, 23])
    add_neighbours(16, [8, 24])
    add_neighbours(17, [9, 18])
    add_neighbours(18, [17, 26])
    add_neighbours(19, [11, 27])
    add_neighbours(20, [12, 28])
    add_neighbours(21, [29, 22])
    add_neighbours(22, [21, 14])
    add_neighbours(23, [15, 31])
    add_neighbours(24, [16, 32, 25])
    add_neighbours(25, [24, 33])
    add_neighbours(26, [18, 34])
    add_neighbours(27, [19, 28])
    add_neighbours(28, [27, 20])
    add_neighbours(29, [21, 37,30])
    add_neighbours(30, [29, 31])
    add_neighbours(31, [30, 23])
    add_neighbours(32, [24, 40])
    add_neighbours(33, [25, 41])
    add_neighbours(34, [26, 35])
    add_neighbours(35, [34, 36])
    add_neighbours(36, [35, 44])
    add_neighbours(37, [29, 38])

    add_neighbours(38, [37])
    add_neighbours(39, [47])
    add_neighbours(40, [32, 48])
    add_neighbours(41, [33, 42])
    add_neighbours(42, [41, 50])
    add_neighbours(43, [51])
    add_neighbours(44, [36, 52])
    add_neighbours(45, [46, 53])
    add_neighbours(46, [45, 47])
    add_neighbours(47, [46, 39])
    add_neighbours(48, [40, 49])
    add_neighbours(49, [48, 57])
    add_neighbours(50, [42, 58])
    add_neighbours(51, [43, 59])
    add_neighbours(52, [44, 60])
    add_neighbours(53, [45, 54])
    add_neighbours(54, [53, 55])
    add_neighbours(55, [54, 63])
    add_neighbours(56, [57])
    add_neighbours(57, [56, 49])
    add_neighbours(58, [50, 59])
    add_neighbours(59, [58, 51])
    add_neighbours(60, [52, 61])
    add_neighbours(61, [60, 62])
    add_neighbours(62, [61, 63])
    add_neighbours(63, [55, 62])

    return graph_neighbours


def add_neighbours(node, neighbours):
    new_list = []
    for val in neighbours:
        if val is not None and not val == '':
            new_list.append(str(val))
    graph_neighbours[str(node)] = new_list
